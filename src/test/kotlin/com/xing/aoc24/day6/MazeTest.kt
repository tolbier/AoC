package com.xing.aoc24.day6

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test

class MazeTest {
    val rawMazes: List<String> = listOf(
        """
            ....#.....
            .........#
            ..........
            ..#.......
            .......#..
            ..........
            .#..^.....
            ........#.
            #.........
            ......#...
        """,
        """
            ....#....#
            .........#
            ..#.......
            .#..#>....
            ....#.....
            .......#..
            ..........
            ........#.
            #.........
            ......#...
        """,
        """
            ....#....#
            .........#
            ..#.......
            .#..#v....
            ....#.....
            .......#..
            ..........
            ........#.
            #.........
            ......#...
        """,
        """
            ....#....#
            .........#
            ..#.......
            .#..#<....
            ....#.....
            .......#..
            ..........
            ........#.
            #.........
            ......#...
        """,
    ).map { it.trimIndent() }

    val mazes: List<Maze> = rawMazes.map { it.buildMaze() }

    @BeforeEach
    fun setUp() {

    }

    @Test
    fun drawTest() {
        assertEquals(rawMazes[0], mazes[0].draw())
    }

    @Test
    fun getGuardCoords() {
        assertEquals(Coords(4, 6), mazes[0].getGuardCoords())
        assertEquals(Coords(5, 3), mazes[1].getGuardCoords())
    }

    @Test
    fun getCell() {
        val maze = mazes[0]
        assertEquals('.', maze.getCell(Coords(0, 0)))
        assertEquals('#', maze.getCell(Coords(4, 0)))
        assertEquals('^', maze.getCell(Coords(4, 6)))
        assertEquals('#', maze.getCell(Coords(1, 6)))
    }

    @Test
    fun getGuardDirection() {
        assertEquals(Direction.NORTH, mazes[0].getGuardDirection())
        assertEquals(Direction.EAST, mazes[1].getGuardDirection())
        assertEquals(Direction.SOUTH, mazes[2].getGuardDirection())
        assertEquals(Direction.WEST, mazes[3].getGuardDirection())
    }

    @Test
    fun getGuard() {
        assertEquals(Guard(Direction.NORTH, Coords(4, 6)), mazes[0].getGuard())
        assertEquals(Guard(Direction.EAST, Coords(5, 3)), mazes[1].getGuard())
        assertEquals(Guard(Direction.SOUTH, Coords(5, 3)), mazes[2].getGuard())
        assertEquals(Guard(Direction.WEST, Coords(5, 3)), mazes[3].getGuard())
    }

    @Test
    fun setVisited() {
        assertEquals(
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ..........
                .#..N.....
                ........#.
                #.........
                ......#...
            """.buildMaze(),
            mazes[0].setVisited(Guard(Direction.NORTH, Coords(4, 6)))
        )
    }

    @Test
    fun setGuard() {
        assertEquals(
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ....>.....
                .#..X.....
                ........#.
                #.........
                ......#...
            """.buildMaze(),
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ..........
                .#..X.....
                ........#.
                #.........
                ......#...
            """.buildMaze().setGuard(Guard(Direction.EAST, Coords(4, 5)))
        )
    }

    @Test
    fun setGuardWithCoordsOut() {
        assertEquals(mazes[0], mazes[0].setGuard(Guard(Direction.EAST, Coords(-1, -1))))
        assertEquals(mazes[0], mazes[0].setGuard(Guard(Direction.EAST, Coords(100, -1))))
        assertEquals(mazes[0], mazes[0].setGuard(Guard(Direction.EAST, Coords(-1, 100))))
        assertEquals(mazes[0], mazes[0].setGuard(Guard(Direction.EAST, Coords(100, 100))))
    }

    @Test
    fun goStepWithNoBlock() {
        assertEquals(
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ....^.....
                .#..N.....
                ........#.
                #.........
                ......#...
            """.buildMaze(),
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ..........
                .#..^.....
                ........#.
                #.........
                ......#...
            """.buildMaze().goStep()
        )
    }

    @Test
    fun goStepWithBlock() {
        assertEquals(
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ....#.....
                .#..>.....
                ........#.
                #.........
                ......#...
            """.buildMaze(),
            """
                ....#.....
                .........#
                ..........
                ..#.......
                .......#..
                ....#.....
                .#..^.....
                ........#.
                #.........
                ......#...
            """.buildMaze().goStep()
        )
    }

    @Test
    fun countVisited() {
        assertEquals(
            41,
            """
                ....#.....
                ....EEEES#
                ....N...S.
                ..#.N...S.
                ..EEEES#S.
                ..N.N.S.S.
                .#NWWWSWW.
                .EEEEEES#.
                #NWWWWWS..
                ......#S..
            """.buildMaze().countVisited()
        )
    }
}
